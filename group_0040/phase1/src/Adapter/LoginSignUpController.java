package Adapter;

import Entities.UserAccount;
import Usecase.Authenticator;
import Usecase.UserManager;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Scanner;

public class LoginSignUpController {
    LoginSignUpPresenter presenter = new LoginSignUpPresenter();

    /**
     * Gives the user permission to log by checking the userID and password provided
     * @param userID ID entered by the user
     * @param password Password entered by the user
     * @return a value of '0' if the user goes to the Admin Menu Controller, a value of '1' if the user goes to the
     *      MainController Menu
     */
    public boolean logIn(int userID, String password) {
        boolean success = false;
        ReadWriteData dataReader = new ReadWriteData();
        Authenticator authenticator = new Authenticator();
        try{
            List<Integer> userIDs = dataReader.getAllUserIDs();
            List<Integer> adminIDs = dataReader.getAllAdminIDs();
            if(userIDs.size() == 0 && adminIDs.size() == 0){
                presenter.signUpFirst();
                success = false;
            }else{
                if (userIDs.contains(userID) || adminIDs.contains(userID)) {
                    success = authenticator.comparePassword(dataReader.findPassword(userID), password);
                }
            }
        } catch (IOException e) {
           presenter.ioFindError(userID);
           success = false;
        }
        return success;
    }


    /**
     * Signs a user up in the system
     * @param password Represents the password entered by the User
     * @param userManager the UserManager object which stores all users in the system.
     * @return The appropriate ID of the user generated by the system
     */
    public Integer signUpUser(String password, UserManager userManager){
        ReadWriteData dataWriter = new ReadWriteData();
        LoginSignUpPresenter presenter = new LoginSignUpPresenter();
        try {
            Integer username = dataWriter.insertUser(password, 0, 0, 0, 0,
                    new ArrayList<>(), new ArrayList<>());
            UserAccount newUser = new UserAccount(password);
            newUser.setUserID(username);
            userManager.addUser(newUser);
            return username;

        } catch (IOException e) {
            presenter.ioAddError();
        } catch (NullPointerException e){
            presenter.nullPointerError();
        }
        return 0; //something went wrong
    }


    /**
     * The run method for the logging in system. Allow a user to login or sign up a UserAccount based on the user's inputs.
     * @param userManager the UserManager of all UserAccounts in the system.
     * @return the userID of the user who is logging in or signing up.
     */
    public Integer loginRun(UserManager userManager) {
        Scanner scanner = new Scanner(System.in);
        Iterator<String> prompts = presenter;
        List<String> inputs = new ArrayList<>();
        presenter.selectLoginSignUp();
        String input = scanner.nextLine();
        Integer username = 0;
        while(!((input.equals("1")) ||  (input.equals("2")))){
            presenter.selectLoginSignUp();
            input = scanner.nextLine();
        }
        if (input.equals("1")) {
            while (prompts.hasNext()) {
                System.out.println(prompts.next());
                inputs.add(scanner.nextLine());
            }
            try {
                username = Integer.parseInt(inputs.get(0));
            } catch (NumberFormatException e) {
                presenter.incorrectInfoError();
                return 0; //something went wrong
            }
        } else {
            presenter.signUpPrompt();
            inputs.add(scanner.nextLine());
        }

        switch(input) {
            case "1":
                String loginPassword = inputs.get(1);
                if (logIn(username, loginPassword)) {
                    return username;
                } else {
                    presenter.incorrectInfoError();
                    return 0; //something went wrong
                }
            case "2":
                String signUpPassword = inputs.get(0);
                while (signUpPassword.length() == 0) {
                    presenter.blankPasswordError();
                    signUpPassword = scanner.nextLine();
                }
                username = signUpUser(signUpPassword, userManager);
                presenter.printUserName(username);
                return username;

            default:
                presenter.invalidOptionError();
        }

        return 0; // something went wrong
    }
}
